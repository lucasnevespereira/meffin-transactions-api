// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "meffin-transactions-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *TransactionService) Create(ctx context.Context, request models.CreateTransactionRequest) (*models.Transaction, error) {
	ret := _m.Called(ctx, request)

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateTransactionRequest) (*models.Transaction, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateTransactionRequest) *models.Transaction); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateTransactionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpiredTransactions provides a mock function with given fields: ctx
func (_m *TransactionService) DeleteExpiredTransactions(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: ctx, transactionID
func (_m *TransactionService) DeleteTransaction(ctx context.Context, transactionID string) error {
	ret := _m.Called(ctx, transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserTransactions provides a mock function with given fields: ctx, userId
func (_m *TransactionService) GetUserTransactions(ctx context.Context, userId string) ([]*models.Transaction, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Transaction, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Transaction); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: ctx, transaction
func (_m *TransactionService) UpdateTransaction(ctx context.Context, transaction *models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) (*models.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) *models.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
