// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "meffin-transactions-api/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// AutoMigrate provides a mock function with given fields:
func (_m *IRepository) AutoMigrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, rowServer
func (_m *IRepository) Create(ctx context.Context, rowServer *repository.RowTransaction) (*repository.RowTransaction, error) {
	ret := _m.Called(ctx, rowServer)

	var r0 *repository.RowTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowTransaction) (*repository.RowTransaction, error)); ok {
		return rf(ctx, rowServer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowTransaction) *repository.RowTransaction); ok {
		r0 = rf(ctx, rowServer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RowTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.RowTransaction) error); ok {
		r1 = rf(ctx, rowServer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: ctx, rowCategory
func (_m *IRepository) CreateCategory(ctx context.Context, rowCategory *repository.RowCategory) (*repository.RowCategory, error) {
	ret := _m.Called(ctx, rowCategory)

	var r0 *repository.RowCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowCategory) (*repository.RowCategory, error)); ok {
		return rf(ctx, rowCategory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowCategory) *repository.RowCategory); ok {
		r0 = rf(ctx, rowCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RowCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.RowCategory) error); ok {
		r1 = rf(ctx, rowCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: ctx, categoryID
func (_m *IRepository) DeleteCategory(ctx context.Context, categoryID int64) error {
	ret := _m.Called(ctx, categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredTransactions provides a mock function with given fields: ctx
func (_m *IRepository) DeleteExpiredTransactions(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: ctx, transactionID
func (_m *IRepository) DeleteTransaction(ctx context.Context, transactionID int64) error {
	ret := _m.Called(ctx, transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCategoriesByUserID provides a mock function with given fields: ctx, userID
func (_m *IRepository) GetCategoriesByUserID(ctx context.Context, userID string) ([]*repository.RowCategory, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*repository.RowCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*repository.RowCategory, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*repository.RowCategory); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.RowCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByUserID provides a mock function with given fields: ctx, userID
func (_m *IRepository) GetTransactionsByUserID(ctx context.Context, userID string) ([]*repository.RowTransaction, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*repository.RowTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*repository.RowTransaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*repository.RowTransaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.RowTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: ctx, updatedCategory
func (_m *IRepository) UpdateCategory(ctx context.Context, updatedCategory *repository.RowCategory) (*repository.RowCategory, error) {
	ret := _m.Called(ctx, updatedCategory)

	var r0 *repository.RowCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowCategory) (*repository.RowCategory, error)); ok {
		return rf(ctx, updatedCategory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowCategory) *repository.RowCategory); ok {
		r0 = rf(ctx, updatedCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RowCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.RowCategory) error); ok {
		r1 = rf(ctx, updatedCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: ctx, updatedTransaction
func (_m *IRepository) UpdateTransaction(ctx context.Context, updatedTransaction *repository.RowTransaction) (*repository.RowTransaction, error) {
	ret := _m.Called(ctx, updatedTransaction)

	var r0 *repository.RowTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowTransaction) (*repository.RowTransaction, error)); ok {
		return rf(ctx, updatedTransaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowTransaction) *repository.RowTransaction); ok {
		r0 = rf(ctx, updatedTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RowTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.RowTransaction) error); ok {
		r1 = rf(ctx, updatedTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
